/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema_de_cine;


import conexion_BD.conexion; //la importacion da la conxion de la base de datos en MySQL
import java.sql.*; //importamos todo lo necesario para manejar la conexio y consultas 
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel; //para manejar la tabla
import conexion_BD.conexion;
/**
 *
 * @author jr245
 */
public class Panel_Peliculas extends javax.swing.JPanel {
    DefaultTableModel modelo; //modelo de la tabla para gestionar las filas y columnas
    

    /**
     * Creates new form Panel_Peliculas
     */
    public Panel_Peliculas() {
        initComponents();
        
        //configuracion del modelo de la tabla con las columnas que necesitamos
        modelo = (DefaultTableModel) tabla_peliculas.getModel();
        modelo.setRowCount(0);//limpia la filas iniciales par empezar con una tabla vacio si tiene datos la tabla
        
        
        //se llama la metodo para cargar las peliculas desde MySql y las mostramos e la tabla
        mostrarPeliculas();
   
    }
    
    /**
     * este metodo se conecta a la base de datos hace una consulta para traer todas las peliculas
     * y las agrega fila por fila a la tabla 
     */
    
    private void mostrarPeliculas() {
        conexion dbc = new conexion();//creamos la conexion
        Connection con = dbc.conectar(); //abrimos la conexion
        
        Statement st = null;
        ResultSet rs = null;

        try {
            st = con.createStatement(); //preparamos la consulta
            rs = st.executeQuery("SELECT * FROM peliculas"); //ejecutamos la consulta para abtener todas las peliculas 

            //vamos leyendo cada registro que nos devuelve la consulta
            while (rs.next()) {
                //tomamos todos los datos de la fila y los agregamos en el arreglo fila
                Object[] fila = {
                    rs.getInt("pelicula_id"), //el Id de la pelicula
                    rs.getString("titulo"), //el titulo de la pelicula
                    rs.getInt("duracion"), //la duracion de la pelicula
                    rs.getString("clasificacion") //la clasificacion como (PG-13, R, etc)
                };
                //añadimos esa fila a la tabla 
                modelo.addRow(fila);
            }

        } catch (SQLException ex) {
            // si algo sale mal con la conexion muestra este mesaje en la consola
            System.out.println("Error al cargar películas: " + ex.getMessage());
        } finally{
            //cerramos todo para liberar memoria y evitar problemas
            try{
                if (rs != null) rs.close();
                if (st != null) st.close();
                if (con != null) con.close();
            }catch (SQLException ex){
                System.out.println("Error cerrando recursos" + ex.getMessage());
            }
        }
    }
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_peliculas = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtitulo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txduracion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbclasificacion = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnrefresh = new javax.swing.JButton();
        btnadgregapeli = new javax.swing.JButton();
        btneliminar = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Lista De Peliculas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 450));

        tabla_peliculas.setBackground(new java.awt.Color(31, 41, 55));
        tabla_peliculas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabla_peliculas.setForeground(new java.awt.Color(229, 231, 235));
        tabla_peliculas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Titulo", "Duracion", "Clasificacion"
            }
        ));
        jScrollPane1.setViewportView(tabla_peliculas);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Titulo:");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Duracion");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txduracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txduracionActionPerformed(evt);
            }
        });

        jLabel3.setText("Clasificacion");
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbclasificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "G ", "PG ", "PG-13 ", "R" }));
        cbclasificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbclasificacionActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnrefresh.setText("Actualizar");
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });

        btnadgregapeli.setText("Agregar Pelicula");
        btnadgregapeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadgregapeliActionPerformed(evt);
            }
        });

        btneliminar.setText("Eliminar");
        btneliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnrefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnadgregapeli, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btneliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnrefresh)
                .addGap(18, 18, 18)
                .addComponent(btnadgregapeli)
                .addGap(18, 18, 18)
                .addComponent(btneliminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(32, 32, 32)
                        .addComponent(txtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbclasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txduracion, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbclasificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txduracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txduracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txduracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txduracionActionPerformed

    private void btnadgregapeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadgregapeliActionPerformed
        String titulo = txtitulo.getText().trim();
        String duracionStr = txduracion.getText().trim();
        String clasificacion = cbclasificacion.getSelectedItem().toString();
        
        if(titulo.isEmpty()|| duracionStr.isEmpty() || clasificacion.isEmpty()){
            JOptionPane.showMessageDialog(null,"por favor llene todos los campos.");
            return;
        }
        
        //validadcion numerica en la duracion
        int duracion;
        try{
            duracion= Integer.parseInt(duracionStr);
            if(duracion <=0){
                JOptionPane.showMessageDialog(null, "la duracion deb ser un numeri entero");
                return;
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"La duracion debe de ser un numero ");
            return;
        }
        
       
        
        //intento de agregar a la base de datos
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet generatedKeys = null;
        try{
            conexion dbc = new conexion();
            con = dbc.conectar();
            if(con == null){
                JOptionPane.showMessageDialog(null, "Nose pudo conectar con la base de datos");
                return;
            }
            String sql ="INSERT INTO peliculas (titulo, duracion, clasificacion) VALUES (?,?,?)";
            stmt = con.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
            
            //eatblacimiento de parametros
            stmt.setString(1, titulo);
            stmt.setInt(2,duracion);
            stmt.setString(3, clasificacion);
            
            //ejecucion para insertar la peli
            int filasAfectadas = stmt.executeUpdate();
            
            if (filasAfectadas > 0){
                generatedKeys = stmt.getGeneratedKeys();
                int peliculaId =0;
                if(generatedKeys.next()){
                    peliculaId = generatedKeys.getInt(1);
                }
                
                JOptionPane.showMessageDialog(null,"Pelicula agregada correctamente");
                //agrega a la tabla si se confirma la insercion a la BD
                Object[] fila = {titulo, duracionStr, clasificacion};
                modelo.addRow(fila);
                
                //limpia los campos despues de inserta los datos
                txtitulo.setText("");
                txduracion.setText("");
                cbclasificacion.setSelectedIndex(0);
                    
                
            }else{
                JOptionPane.showMessageDialog(null,"No se pudo agregar la pelicula" );
            }
            
            
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,"Error al agregar la pelicula");
            ex.printStackTrace();
        }finally{
            //cierra los recurso
            try{
                if (generatedKeys != null) generatedKeys.close();
                if (stmt != null)stmt.close();
                if (con != null) con.close();
            }catch(SQLException ex){
                System.out.println("Error carrando recursos:"+ex.getMessage());
                
            }
           
        }
    }//GEN-LAST:event_btnadgregapeliActionPerformed

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed
        //deshabilita el boton mientras se actualiza
        btnrefresh.setEnabled(false);
        btnrefresh.setText("Actualizando...");
        
        try{
            //limpia las filas de la tabla 
            modelo.setRowCount(0);
            
            //vuelve a cargar los datos desde la base de datos
            mostrarPeliculas();
            
            //mensaje de exito 
            JOptionPane.showMessageDialog(null, "Tabla Actualizada correctamente",
                                        "Actualizacion",JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null,"Error al actualizar la tabla "+ ex.getMessage(),"Error", JOptionPane.ERROR_MESSAGE);
            
        }finally{
            //vuelve a habilitar el boton
            btnrefresh.setEnabled(true);
            btnrefresh.setText("Actualizar");
        }
    }//GEN-LAST:event_btnrefreshActionPerformed

    private void cbclasificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbclasificacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbclasificacionActionPerformed

    private void btneliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneliminarActionPerformed
       //verificacion de hay datos en la tabla
        if (modelo.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "No hay peliculas para eliminar","Tabla vacia", JOptionPane.INFORMATION_MESSAGE);
            return;
            
        }
        
        //obtenemos la fila que deseamos 
        int filaSeleccionada = tabla_peliculas.getSelectedRow();
        
        //verificamos si hay una fila seleccionada
        if(filaSeleccionada == -1){
            JOptionPane.showMessageDialog(null,"Por favor seleccione una pelicula de la tabla para eliminarla","Sin Seleccion",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        
        
    }//GEN-LAST:event_btneliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnadgregapeli;
    private javax.swing.JButton btneliminar;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JComboBox<String> cbclasificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_peliculas;
    private javax.swing.JTextField txduracion;
    private javax.swing.JTextField txtitulo;
    // End of variables declaration//GEN-END:variables
}
